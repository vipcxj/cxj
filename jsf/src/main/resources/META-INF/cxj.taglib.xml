<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->


<facelet-taglib
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    xmlns='http://java.sun.com/xml/ns/javaee'
    xsi:schemaLocation='http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd' 
    version="2.0">
    <namespace>http://cxj.com/jsf</namespace>
    <function>
        <description>
            删除List中特定元素
        </description>
        <function-name>removeAt</function-name>
        <function-class>com.cxj.jsf.utils.CollectionUtils</function-class>
        <function-signature>java.lang.Object removeAt(java.util.List, int)</function-signature>
    </function>
    <function>
        <description>
            判断对象是否是一个Map
        </description>
        <function-name>isMap</function-name>
        <function-class>com.cxj.jsf.utils.ObjectUtils</function-class>
        <function-signature>boolean isMap(java.lang.Object)</function-signature>
    </function>
    <function>
        <description>
            判断对象是否是一个Collection
        </description>
        <function-name>isCollection</function-name>
        <function-class>com.cxj.jsf.utils.ObjectUtils</function-class>
        <function-signature>boolean isCollection(java.lang.Object)</function-signature>
    </function>
    <function>
        <description>
            判断对象是否是一个list
        </description>
        <function-name>isList</function-name>
        <function-class>com.cxj.jsf.utils.ObjectUtils</function-class>
        <function-signature>boolean isList(java.lang.Object)</function-signature>
    </function>
    <function>
        <description>
            判断对象是否是一个set
        </description>
        <function-name>isSet</function-name>
        <function-class>com.cxj.jsf.utils.ObjectUtils</function-class>
        <function-signature>boolean isSet(java.lang.Object)</function-signature>
    </function>
    <function>
        <description>
            判断对象是否是一个array
        </description>
        <function-name>isArray</function-name>
        <function-class>com.cxj.jsf.utils.ObjectUtils</function-class>
        <function-signature>boolean isArray(java.lang.Object)</function-signature>
    </function>
    <function>
        <description>返回高级图片url</description>
        <function-name>getAdvancedImageSrcFromComponent</function-name>
        <function-class>com.cxj.jsf.component.advancedgraphicimage.GraphicImageUtil</function-class>
        <function-signature>java.lang.String getAdvancedImageSrcFromComponent(java.lang.String)</function-signature>
    </function>
    <tag>
        <description>
            用于p:panelGrid中，表示一行，带标签的输入控件
        </description>
        <display-name>多功能行输入控件</display-name>
        <tag-name>gridInput</tag-name>
        <source>tags/gridInput.xhtml</source>
        <attribute>
            <description>必须是text, password, boolean, select, muti-select, separator, empty中的一种！</description>
            <name>type</name>
        </attribute>
        <attribute>
            <name>label</name>
        </attribute>
        <attribute>
            <name>property</name>
        </attribute>
        <attribute>
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <name>process</name>
        </attribute>
        <attribute>
            <name>update</name>
        </attribute>
    </tag>
    <tag>
        <tag-name>dialogLink</tag-name>
        <source>tags/dialogLink.xhtml</source>
        <attribute>
            <name>dialog</name>
            <required>true</required>
        </attribute>
        <attribute>
            <name>tirgger</name>
            <required>true</required>
        </attribute>
        <attribute>
            <name>dialogContent</name>
        </attribute>
        <attribute>
            <name>confirm</name>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
                自动生成id赋给变量id
            ]]>
        </description>
        <tag-name>autoId</tag-name>
        <handler-class>com.cxj.jsf.taghandler.AutoId</handler-class>
    </tag>
    <tag>
        <description>
            <![CDATA[
                为datatable添加增删功能
            ]]>
        </description>
        <tag-name>tableMenu</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.tablemenu.TableMenu</component-type>
            <renderer-type>com.cxj.jsf.component.tablemenu.TableMenuRender</renderer-type>
        </component>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>widgetVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>position</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>表格元素类型，用以new出新的元素实例。若不设置这个属性，又希望使用tableInserter功能，则必须捕获insertInit事件，并在监听器中获取TableMenu组件，并调用setItem方法来设置要插入的新元素。否则会报错。</description>
            <name>itemType</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>tableInserter</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.tableinserter.TableInserter</component-type>
            <renderer-type>com.cxj.jsf.component.tableinserter.TableInserterRender</renderer-type>
        </component>
        <attribute>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>tableDeleter</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.tabledeleter.TableDeleter</component-type>
            <renderer-type>com.cxj.jsf.component.tabledeleter.TableDeleterRender</renderer-type>
        </component>
        <attribute>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>codeMirror</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.codemirror.CodeMirror</component-type>
            <renderer-type>com.cxj.jsf.component.codemirror.CodeMirrorRender</renderer-type>
        </component>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>widgetVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>escape</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <name>value</name>
            <type>java.lang.Object</type>
            <required>true</required>
        </attribute>
        <attribute>
            <description>The mode to use. When not given, this will default to the first mode that was loaded. It may be a string, which either simply names the mode or is a MIME type associated with the mode. Alternatively, it may be an object containing configuration options for the mode, with a name property that names the mode (for example {name: "javascript", json: true}). The demo pages for each mode contain information about what configuration parameters the mode supports. You can ask CodeMirror which modes and MIME types have been defined by inspecting the CodeMirror.modes and CodeMirror.mimeModes objects. The first maps mode names to their constructors, and the second maps MIME types to mode specs.</description>
            <name>mode</name>
            <type>java.lang.Object</type>
            <required>true</required>
        </attribute>
        <attribute>
            <description>How many spaces a block (whatever that means in the edited language) should be indented. The default is 2.</description>
            <name>indentUnit</name>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>Configures the key map to use. The default is "default", which is the only key map defined in codemirror.js itself. Extra key maps are found in the key map directory. See the section on key maps for more information.</description>
            <name>keyMap</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Can be used to specify extra key bindings for the editor, alongside the ones defined by keyMap. Should be either null, or a valid key map value.</description>
            <name>extraKeys</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Whether to show line numbers to the left of the editor.</description>
            <name>lineNumbers</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>Can be used to add extra gutters (beyond or instead of the line number gutter). Should be an array of CSS class names, each of which defines a width (and optionally a background), and which will be used to draw the background of the gutters. May include the CodeMirror-linenumbers class, in order to explicitly set the position of the line number gutter (it will default to be to the right of all other gutters). These class names are the keys passed to setGutterMarker.</description>
            <name>gutters</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>This disables editing of the editor content by the user.</description>
            <name>readOnly</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>If true is given and readOnly is true, focusing of the editor is also disallowed.</description>
            <name>noCursor</name>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>cmBrackets</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.codemirror.feature.Brackets</component-type>
        </component>
        <attribute>
            <name>match</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <name>autoClose</name>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>cmTags</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.codemirror.feature.Tags</component-type>
        </component>
        <attribute>
            <name>match</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <name>autoClose</name>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>cmFoldCode</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.codemirror.feature.FoldCode</component-type>
        </component>
    </tag>
    <tag>
        <tag-name>layout</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.layout.Layout</component-type>
        </component>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>widgetVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>fullPage</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <name>options</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <name>eastPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>westPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>northPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>southPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>centerPane</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>layoutPane</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.layout.LayoutPane</component-type>
        </component>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>widgetVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>position "north" | "south" | "west" | "east" | "center"</description>
            <name>position</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>options</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <name>eastSubPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>westSubPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>northSubPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>southSubPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>centerSubPane</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>contentClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>contentStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>headerStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>footerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>footerStyle</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>advancedRenderering</tag-name>
        <handler-class>com.cxj.jsf.component.advancedgraphicimage.AdvancedRendererHandler</handler-class>
    </tag>
    <tag>
        <tag-name>advancedImageCropper</tag-name>
        <description><![CDATA[ImageCropper allows cropping a certain region of an image. A new image is created containing the cropped area and assigned to a CroppedImage instanced on the server side.]]></description>
        <component>
            <component-type>com.cxj.jsf.component.advancedgraphicimage.AdvancedImageCropper</component-type>
            <renderer-type>com.cxj.jsf.component.advancedgraphicimage.AdvancedImageCropperRender</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Unique identifier of the component in a namingContainer.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Value of the component.]]></description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></description>
            <name>converter</name>
            <required>false</required>
            <type>java.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></description>
            <name>immediate</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Marks component as required.]]></description>
            <name>required</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method expression referring to a method validationg the input.]]></description>
            <name>validator</name>
            <required>false</required>
            <type>javax.faces.validator.Validator</type>
        </attribute>
        <attribute>
            <description><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></description>
            <name>valueChangeListener</name>
            <required>false</required>
            <type>javax.faces.event.ValueChangeListener</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when required field validation fails.]]></description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when conversion fails.]]></description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Message to display when validation fails.]]></description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Name of the client side widget.]]></description>
            <name>widgetVar</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Context relative path to the image.]]></description>
            <name>image</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Context relative path to the image.]]></description>
            <name>imageValue</name>
            <required>false</required>
            <type>org.primefaces.model.StreamedContent</type>
        </attribute>
        <attribute>
            <description><![CDATA[Alternate text of the image.]]></description>
            <name>alt</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Aspect ratio of the cropper area.]]></description>
            <name>aspectRatio</name>
            <required>false</required>
            <type>java.lang.Double</type>
        </attribute>
        <attribute>
            <description><![CDATA[Minimum size of the cropper area.]]></description>
            <name>minSize</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Maximum size of the cropper area.]]></description>
            <name>maxSize</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Background color of the container.]]></description>
            <name>backgroundColor</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Background opacity of the container. Default is 0.6]]></description>
            <name>backgroundOpacity</name>
            <required>false</required>
            <type>java.lang.Double</type>
        </attribute>
        <attribute>
            <description><![CDATA[Initial coordinates of the cropper area.]]></description>
            <name>initialCoords</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Maximum box width of the cropping area.]]></description>
            <name>boxWidth</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Maximum box height of the cropping area.]]></description>
            <name>boxHeight</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
                div标签的简单jsf封装
            ]]>
        </description>
        <tag-name>div</tag-name>
        <component>
            <component-type>com.cxj.jsf.component.div.Div</component-type>
            <renderer-type>com.cxj.jsf.component.div.DivRender</renderer-type>
        </component>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
</facelet-taglib>
